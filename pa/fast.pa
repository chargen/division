#include <omp.h>
#include <pthread.h>
#include <stdio.h>
#include <math.h>
#include <immintrin.h>
#include "util.h"
#define _USE_MIC
$include "parray.pa"
int main(int argc, char *argv[]) {   _pa_main();   return 0;}
#define THREAD_NUM (59*4)
#define REPEAT (1<<11)  // ideal 1<<11
#define NDIMS 8
#define NITERS (256)    // ideal 256
$var NSIMD(4) 			// ideal 4
#define PERFORM
$parray {paged double[THREAD_NUM][N]} PAGED
$parray {micmem double[THREAD_NUM][N]} MIC

$subprog div_ab(a, b, c) { // y^8: 64-bit sub: 37.584952 Gflops  32-bit sub: 43.564720 Gflops
						   // y^4:								 32-bit sub: 52.946531 Gflops
    __m512d y, q;  union { __m512i i; __m512d d; } p;
    p.d = b; p.i = _mm512_sub_epi32(MAGIC, p.i);		// p.i = MAGIC - p.i
    y = _mm512_fmsub_pd(p.d, b, ONES);		// y = p.d * x - 1
    q = _mm512_fnmadd_pd(p.d, y, p.d);		// q = - p.d * y + p.d
    y = _mm512_mul_pd(y, y);				// y = y * y
    q = _mm512_fmadd_pd(q, y, q);			// q = q * y + q
    y = _mm512_mul_pd(y, y);				// y = y * y
//    q = _mm512_fmadd_pd(q, y, q);			// q = q * y + q
//    y = _mm512_mul_pd(y, y);				// y = y * y  (y = y * y + 1 is even faster!!)
    q = _mm512_fmadd_pd(q, y, q);			// q = q * y + q
	c = _mm512_mul_pd(a, q);				// q = q * a
}
$end

$subprog div_abn(a, b, c){
    $repeat(k, 0, $NN){__m512d y@k@, q@k@;}
	$repeat(k, 0, $NN){ union { __m512i i; __m512d d; } p@k@;}
    $repeat(k, 0, $NN){ p@k@.d = b@k@; }
    $repeat(k, 0, $NN){ p@k@.i = _mm512_sub_epi32(MAGIC, p@k@.i); }		// p.i = MAGIC - p.i
    $repeat(k, 0, $NN){ y@k@ = _mm512_fmsub_pd(p@k@.d, b@k@, ONES);	}	// y = p.d * x - 1
    $repeat(k, 0, $NN){ q@k@ = _mm512_fnmadd_pd(p@k@.d, y@k@, p@k@.d);}	// q = - p.d * y + p.d
    $repeat(k, 0, $NN){ y@k@ = _mm512_mul_pd(y@k@, y@k@);}				// y = y * y
    $repeat(k, 0, $NN){ q@k@ = _mm512_fmadd_pd(q@k@, y@k@, q@k@);}		// q = q * y + q
    $repeat(k, 0, $NN){ y@k@ = _mm512_mul_pd(y@k@, y@k@);}				// y = y * y
    $repeat(k, 0, $NN){ q@k@ = _mm512_fmadd_pd(q@k@, y@k@, q@k@);}		// q = q * y + q
    $repeat(k, 0, $NN){ y@k@ = _mm512_mul_pd(y@k@, y@k@);}				// y = y * y
    $repeat(k, 0, $NN){ q@k@ = _mm512_fmadd_pd(q@k@, y@k@, q@k@);}		// q = q * y + q
	$repeat(k, 0, $NN){ c@k@ = _mm512_mul_pd(a@k@, q@k@); }				// q = q * e	
}
$end

// auto-vec 27.269131 Gflops
$subprog RUN() {
#pragma offload target(mic) nocopy(m)
    { _PA_CREATE_TIMER         _PA_TIME_NOW
        #pragma omp parallel num_threads(THREAD_NUM)
        {
#ifdef __MIC__
            int pid = omp_get_thread_num();
            const __m512i MAGIC = _mm512_set1_epi64(0x7fde5f73aabb2400);
            const __m512d ONES = _mm512_set1_pd(1.0);
            $repeat(l,0,$NSIMD) {$repeat(k,0,$NN) {__m512d x@l@@k@=_mm512_set1_pd((double)(pid+@l@+@k@));}}
            for(int i = 0; i < REPEAT*NITERS*NDIMS; i += NDIMS) {
                $repeat(l,0,$NSIMD) {{
					$repeat(k,0,$NN) {__m512d s@k@=ONES, q@k@=x@l@@k@;}
					$div_abn(s, q, x@l@)			// 54.738745 Gflops
//                  x@l@0 = _mm512_div_pd(s0, q0);  // 16.559894 Gflops
//					x@l@0 = _mm512_add_pd(s0, q0);	// 297.547590 Gflops
                }}}
            $repeat(l,0,$NSIMD) {$repeat(k,0,$NN) {m[pid]+=_mm512_reduce_add_pd(x@l@@k@);}}
#endif
        }_PA_TIME_NOW
        printf("%f Gflops\n", 1.0 * $NN * NDIMS * THREAD_NUM * REPEAT * $NSIMD * NITERS / ((double)_PA_TIME_DIFF(1, 2)) / 1e9);
}}
$end

#define N (256)
#define ITERS 128
#define IF_COUNT 0
#define IF_USE_NATIVE 0
#define OVERLAP 2
$var NN(8)
$subprog TEST() {
#pragma offload target(mic) nocopy(m,data,buf)
    {   int cntall[THREAD_NUM*N], countall[THREAD_NUM*N]; 
		for (int i=0; i<THREAD_NUM*N; i++) {cntall[i]=0;countall[i]=0;}
		_PA_CREATE_TIMER      _PA_TIME_NOW
        #pragma omp parallel num_threads(THREAD_NUM)
        {
#ifdef __MIC__
            int pid = omp_get_thread_num();  double sum = 0.0;	m[pid] = 0.0;
			int* cnt=cntall+pid*(N)/OVERLAP, *count=countall+pid*(N);
            const __m512i MAGIC = _mm512_set1_epi64(0x7fde5f73aabb2400);
            const __m512d ONES = _mm512_set1_pd(1.0);
			double* src=data, * dst=buf;
			for(int k=0; k<ITERS; ++k) {double *from=src+pid*(N/OVERLAP), *to=dst+pid*(N);
				for(int i=0; i<N; i+=8){
					__m512d r=_mm512_set1_pd(0); __m512d x=_mm512_load_pd(from+i);
					if(0)for(int j=0; j<N; ++j){
						__m512d t=_mm512_set1_pd(from[j]); t=_mm512_sub_pd(x, t); t=_mm512_fmadd_pd(t, t, ONES);
//						t = _mm512_div_pd(ONES, t);			// 12.084796 Gflops
						$div_ab(ONES, t, t);				// 20.580960 Gflops
						r = _mm512_add_pd(t, r);}
					if(1)for(int j=0; j<N; j+=$NN){
						$repeat(l,0,$NN) {__m512d t@l@=_mm512_set1_pd(from[j+@l@]);
									      if (IF_COUNT) count[i]+=(k+1-cnt[j+@l@]);}
						$repeat(l,0,$NN) {t@l@ = _mm512_sub_pd(x, t@l@);}
						$repeat(l,0,$NN) {t@l@ = _mm512_fmadd_pd(t@l@, t@l@, ONES);}
						$repeat(l,0,$NN) {__m512d s@l@ = ONES;}
						if (IF_USE_NATIVE) {
							$repeat(l,0,$NN) {t@l@= _mm512_div_pd(s@l@,t@l@);}} // 14.654 Gflops N/2 iters no sync; 14.372402 synced
						else {$div_abn(s, t, t);}  // 37.07 Gflops N/2 iters no sync(10insts); 43.58Gflops (8 insts); 35.5 Gflops synced
						$repeat(l,0,$NN) {r=_mm512_add_pd(t@l@,r);} 
					}
					_mm512_store_pd(to+i,r); sum+=_mm512_reduce_add_pd(r);
				}	
				double* tmp=dst; dst=src; src=tmp;
				if (IF_COUNT) for(int i=0; i<N; i++) cnt[i]=k+1;
				#pragma omp barrier  // no barrier 37.093426 Gflops, barrier 35.370818 Gflops
			}
			m[pid] = sum;
#endif
        }
        _PA_TIME_NOW
		printf("%f ms, %f Gflops\n", 1000.0*(double)_PA_TIME_DIFF(1, 2), 1.0*ITERS*THREAD_NUM*N*N/(double)_PA_TIME_DIFF(1, 2)/1e9);
		if (IF_COUNT) for(int i=0;i<10;++i) printf("[%d]=%d ",i, countall[i*8]); printf("\n");
    }
}
$end

#ifdef __MIC__
typedef union { double f[8]; __m512d v; } simd_t;
#endif
$main {
#ifdef PERFORM
    $create PAGED(m), PAGED(data), PAGED(buf)
    $malloc MIC(m), MIC(data), MIC(buf)
	for(int i = 0; i < N * THREAD_NUM;++i) data[i] = (i + 1.0)*100/(N * THREAD_NUM);
	double cpu_result = 0.0;
	double* src = data, *dst = buf;
	if(0)for(int k = 0; k < ITERS; ++k){
		for(int pid = 0; pid < THREAD_NUM; ++pid){
			double* from=src+pid*N/2,* to=dst+pid*N;
			for(int i=0;i<N;++i){
				double r=0.0;
				for(int j=0;j<N;++j){double t = from[i]-from[j];r += 1.0/(1.0+t*t);}
				cpu_result+=r;to[i]=r;	}
		}
		double* tmp = dst; dst=src; src=tmp;
	}
	for(int i = 0; i < N * THREAD_NUM;++i) data[i] = (i + 1.0)*100/(N * THREAD_NUM);
    for(int i = 0; i < 5; ++i) {
    	$copy PAGED(data) to MIC(data)
		$TEST()
//		$RUN()
    }
    $copy MIC(m) to PAGED(m)
	double ans = 0.0;
	for(int pid = 0; pid < THREAD_NUM; ++pid) ans += m[pid];
	printf(" == std %.20e\n == ans %.20e\n\n", cpu_result, ans);
    $destroy PAGED(m), PAGED(data), MIC(m), MIC(data)
#else
    $for mic[1]{
#ifdef __MIC__
        const __m512i MAGIC = _mm512_set1_epi64(0x7fde5f73aabb2400);
        const __m512d ONES = _mm512_set1_pd(1.0);
        simd_t x, z, res, res0;
        srand(time(NULL));
        for(int i = 0; i < 8; ++i) {
            x.f[i] = rand() * 1.0 / RAND_MAX + rand();
        	z.f[i] = rand() * 1.0 / RAND_MAX;
        }
        $div_ab(z.v, x.v, res.v);
		res0.v = _mm512_div_pd(z.v, x.v);
        for(int i = 0; i < 8; ++i) {
            printf("z/x = %.20e / %.20e\n", z.f[i], x.f[i]);
            printf("\tz/x res = %.20e\n", res.f[i]);
            printf("\tz/x std = %.20e\n", z.f[i] / x.f[i]);
            printf("\tz/x mic = %.20e\n", res0.f[i]);
        }
#endif
    }
#endif
}

